# syntax=docker/dockerfile:1
FROM python:3.13-trixie@sha256:716cd434754a988d55cb51f6aecd68e29446773582b100b497e4ef999f4a7196 AS deps

# DEBIAN_FRONTEND=noninteractive exists to prevent tzdata going nuts.
# Maybe dpkg incorrectly detects interactive on buildkit containers?
RUN <<EOF bash
    set -euxo pipefail
    export DEBIAN_FRONTEND=noninteractive

    echo "deb http://apt.postgresql.org/pub/repos/apt trixie-pgdg main 18" > /etc/apt/sources.list.d/pgdg.list
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg
    apt-get update
    apt-get install -y --no-install-recommends \
        libpq-dev=18.* libpq5=18.* \
        libgdal-dev \
        libtiff-dev libjpeg-dev libzip-dev libfreetype-dev \
        libwebp-dev tcl-dev tk-dev libffi-dev \
        zlib1g-dev libpcre2-dev \
        build-essential git sudo ca-certificates
EOF
RUN <<EOF bash
    set -euxo pipefail
    curl -fsSL 'https://bootstrap.pypa.io/get-pip.py' | python - --no-cache --disable-pip-version-check --upgrade --break-system-packages \
    pip==25.2 setuptools==80.9.0
EOF

# This intents to be the sole Dockerfile for the project so allow building variants with different or no dependencies.
COPY --link --from=requirements-context *.txt /requirements/
ARG REQUIREMENTS
ARG CPUCOUNT=1
RUN --mount=type=cache,target=/root/.cache <<EOF bash
    set -eux
    mkdir /deps
    if [[ -n "$REQUIREMENTS" ]]; then
        python -mpip wheel --no-deps --require-hashes --wheel-dir=/deps/wheels --requirement=requirements/$REQUIREMENTS.txt
        ls -al /deps/wheels
    else
        echo 'No REQUIREMENTS defined!'
        exit 1
    fi
EOF

##################################
##################################
FROM python:3.13-trixie@sha256:716cd434754a988d55cb51f6aecd68e29446773582b100b497e4ef999f4a7196 AS certs
##################################
ARG SERVER_NAME="localhost"

# We are using the certbot naming convertion for these files.
RUN mkdir /certs \
 && openssl req -x509 -nodes -newkey rsa:4096 -sha256 \
                -out /certs/cert.pem -keyout /certs/privkey.pem \
                -subj "/CN=$SERVER_NAME"

#################
#################
FROM python:3.13-slim-trixie@sha256:3a6ead7603d322b80dd718d3834dcab86977c73b066028226afd8d0cdf1b0b12
#################
RUN test -e /etc/apt/apt.conf.d/docker-clean # sanity check

RUN <<EOF bash
    set -euxo pipefail
    export DEBIAN_FRONTEND=noninteractive

    apt-get update
    apt-get install -y --no-install-recommends \
        curl gnupg
    echo "deb http://apt.postgresql.org/pub/repos/apt trixie-pgdg main 18" > /etc/apt/sources.list.d/pgdg.list
    echo "deb http://nginx.org/packages/mainline/debian/ trixie nginx" > /etc/apt/sources.list.d/nginx.list
    curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg
    curl http://nginx.org/keys/nginx_signing.key | gpg --dearmor > /etc/apt/trusted.gpg.d/nginx.org.gpg
    apt-get update
    apt-get install -y --no-install-recommends \
        strace ltrace gdb lsof locate net-tools htop iputils-ping dnsutils \
        nano vim tree less telnet socat byobu \
        rsync moreutils \
        graphviz \
        dumb-init \
        libpq5=18.* postgresql-client-18 \
        libpcre2-8-0 \
        sudo ca-certificates \
        nginx \
        gettext \
        tzdata
EOF

ARG TZ=Europe/Bucharest

# Force a sensible default encoding (affects terminal output and filename handling).
# See: https://docs.djangoproject.com/en/stable/howto/deployment/wsgi/uwsgi/
# Note that for en_US.UTF-8 you need to install and compile locales, seems overkill...
ENV LANG=C.UTF-8

ENV TZ=$TZ
RUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime \
 && dpkg-reconfigure -f noninteractive tzdata
RUN <<EOF bash
    set -euxo pipefail
    curl -fsSL https://github.com/astral-sh/uv/releases/download/0.8.22/uv-installer.sh | XDG_BIN_HOME=/usr/local/bin sh
EOF

RUN --mount=type=bind,from=deps,src=/deps,target=/deps <<EOF bash
    set -eux
    if [[ -e /deps/wheels ]]; then
        uv pip install \
            --link-mode=copy \
            --compile-bytecode \
            --no-python-downloads \
            --system \
            --reinstall \
            --no-build \
            --upgrade --no-index --no-deps --break-system-packages /deps/wheels/*
    else
        echo 'No wheels built!'
        exit 1
    fi
EOF
# Adds a new user named python and add it to the list of sudoers. Will be able to call sudo without the password.
# This is more geared to development (eg: match user's UID) than production (where you shouln't need any sudo/home).
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN <<EOF bash
    set -eux
    groupadd --gid $GROUP_ID app
    useradd --uid $USER_ID --gid $GROUP_ID --shell /bin/bash --create-home app
    echo "app ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
EOF

ENV PYTHONUNBUFFERED=x
ENV PYTHONFAULTHANDLER=x

ARG DJANGO_SETTINGS_MODULE
ENV DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE

ARG DJANGO_SECRET_KEY="n/a"
ARG SERVER_NAME="localhost"
ENV SERVER_NAME=$SERVER_NAME

RUN mkdir -p /app /var/app/logs /var/app/static /var/app/run /etc/app /etc/app-defaults /etc/app-latest \
             /shared/$SERVER_NAME/etc /shared/$SERVER_NAME/logs \
 && chown -R app:app /app /var/app/logs /var/app/run

ENV PYTHONPATH=/app/src
# Using 'EOF' instead of EOF to prevent substitutions on $
RUN <<'EOF' bash
    set -eux
    pth_location=$(python -c 'print(__import__("sysconfig").get_path("purelib"))')
    mkdir -p $pth_location
    echo /app/src > $pth_location/app.pth
EOF
RUN ln -sf /proc/self/fd/2 /var/app/logs/error.log \
 && ln -sf /proc/self/fd/2 /shared/$SERVER_NAME/logs/error.log \
 && ln -sf /proc/self/fd/1 /shared/$SERVER_NAME/logs/access.log

WORKDIR /app

# Note that the trailing slash is significant.
COPY --link entrypoint.sh /
COPY --link uwsgi.ini /etc/app-latest/
COPY --link worker.ini /etc/app-latest/
COPY --link nginx.conf /etc/app-latest/
COPY --link nginx.site.conf /etc/app-latest/
COPY --link yacron.yml /etc/app-latest/
COPY --link --from=certs --chmod=0644 /certs/* /etc/app-defaults/

ARG SERVER_NAME="localhost"
RUN <<EOF bash
    set -euxo pipefail
    envsubst '\$SERVER_NAME' < /etc/app-latest/nginx.site.conf | sponge /etc/app-latest/nginx.site.conf
EOF
RUN ln -s cert.pem /etc/app-defaults/chain.pem \
 && ln -s cert.pem /etc/app-defaults/fullchain.pem \
 && ln -sf /etc/app/nginx.conf /etc/nginx/nginx.conf \
 && cp /etc/nginx/mime.types /etc/app-latest \
 && chmod -R go+r /etc/app

COPY --link --from=src-context . /app/src

RUN python -mcompileall /app/src

ARG DJANGO_COLLECTSTATIC
RUN <<EOF bash
    set -eux
    if [[ -n "$DJANGO_COLLECTSTATIC" ]]; then
        __strict_env__=false django-admin collectstatic --noinput --clear -v0
    fi
EOF

ENTRYPOINT ["/entrypoint.sh"]
