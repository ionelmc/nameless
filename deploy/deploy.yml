- hosts: 127.0.0.1
  connection: local
  tags: [build]
  tasks:
    - name: start registry
      community.docker.docker_compose_v2:
        project_name: registry
        remove_orphans: yes
        definition:
          services: >
            {
              "{{ service_name }}": {
                "image": "registry:2",
                "ports": ["{{ registry_port }}:5000"],
                "volumes": ["{{ playbook_dir }}/../.home/registry:/var/lib/registry"]
              }
            }
    - name: build and publish image
      command:
        chdir: ..
        cmd: docker compose --file {{ playbook_dir }}/docker-compose.build.yml {{ item }}
      environment:
        app_version: '{{ app_version }}'
        django_settings_module: '{{ django_settings_module }}'
        registry_host: '{{ registry_host }}'
        server_name: '{{ server_name }}'
        service_name: '{{ service_name }}'
        uid: '{{ uid }}'
      loop:
        - build
        - push
- hosts: all
  tasks:
    - name: log deployment
      tags: [always]
      lineinfile:
        create: true
        dest: /services/deploy.log
        line: ===== {{ inventory_dir|basename }} deploy @ {{ now() }} =====
    - name: copy release docker-compose.yml
      template:
        src: '{{ playbook_dir }}/docker-compose.release.yml'
        dest: '/services/{{ compose_file }}'
    - name: get available compose files
      tags: [always]
      find:
        paths: /services
        patterns: docker-compose*.yml
      register: compose_files_register
- hosts: all
  vars:
    compose_files: '{{ compose_files_register.files | map(attribute="path") | join(":") }}'
  environment:
    COMPOSE_FILE: '{{ compose_files }}'
  tasks:
    - name: 'copy .env'
      tags: [env]
      copy:
        src: '{{ inventory_dir }}/.env'
        dest: '/services/{{ service_name }}/.env'
        backup: yes
      register: envfile
    - name: set default docker-compose.yml in environment
      tags: [env]
      lineinfile:
        dest: /etc/environment
        regexp: '^COMPOSE_FILE='
        line: 'COMPOSE_FILE={{ compose_files|quote }}'
    - name: ensure new users/databases
      when: database_name is defined
      shell:
        executable: /bin/bash
        cmd: |
          exec > >(tee -a /services/deploy.log) 2>&1
          set -euxo pipefail
          docker compose up -d pg
          docker compose exec -T -e POSTGRES_EXTRAS={{ database_name }} pg /docker-entrypoint-initdb.d/extra-users.sh
      ignore_errors: yes
    - name: run migrations
      shell:
        executable: /bin/bash
        cmd: |
          exec > >(tee -a /services/deploy.log) 2>&1
          set -euxo pipefail
          docker compose run --rm --no-TTY {{ service_name }} pysu app django-admin migrate --no-input
    - name: run collectstatic
      shell:
        executable: /bin/bash
        cmd: |
          exec > >(tee -a /services/deploy.log) 2>&1
          set -euxo pipefail
          docker compose run --rm --no-TTY {{ service_name }} pysu app django-admin collectstatic --noinput --clear -v0
    - name: restart services
      tags: [restart, never]
      shell:
        executable: /bin/bash
        cmd: |
          exec > >(tee -a /services/deploy.log) 2>&1
          set -euxo pipefail
          docker compose restart {{ item }}
      loop:
        - '{{ service_name }}'
        - '{{ service_name }}_worker'
        - '{{ service_name }}_cron'
    - name: start/update services
      tags: [restart]
      shell:
        executable: /bin/bash
        cmd: |
          exec > >(tee -a /services/deploy.log) 2>&1
          set -euxo pipefail
          docker compose up --detach --quiet-pull --no-color
    - name: reload nginx
      shell:
        executable: /bin/bash
        cmd: |
          set -euxo pipefail
          docker compose kill --signal HUP nginx
- hosts: 127.0.0.1
  connection: local
  tags: [build]
  tasks:
    - name: shutdown registry
      tags: [cleanup]
      community.docker.docker_compose_v2:
        project_name: registry
        state: absent
        remove_orphans: yes
        definition:
          services: '{"{{ service_name }}": {"image": "registry:2"}}'
